plugins {
    id 'java'
    id 'application'
    id 'com.bmuschko.docker-java-application' version '4.2.0'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'com.google.protobuf' version '0.8.5'
}

docker {
    registryCredentials {
        url = 'https://netifi.azurecr.io'
        username = project.findProperty('netifiPrivateDockerRegistryUsername') ?: System.getenv("DOCKER_NETIFI_USERNAME")
        password = project.findProperty('netifiPrivateDockerRegistryPassword') ?: System.getenv("DOCKER_NETIFI_PASSWORD")
    }
    javaApplication {
        baseImage = 'openjdk:11-jre-slim'
        maintainer = 'Netifi'
        ports = []
    }
}

mainClassName = 'com.netifi.proteus.httpgateway.Main'

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootBomVersion}"
    }
}

dependencies {
    compile project(':proteus-httpgateway-idl')

    compile 'org.springframework.boot:spring-boot-starter'
    
    compile "io.netifi.proteus:proteus-metrics-micrometer:$proteusVersion"

    compile "com.google.protobuf:protobuf-java:$protobufVersion"
    compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    compile "com.lmax:disruptor:$lmaxVersion"

    compile 'io.projectreactor.addons:reactor-extra:3.2.1.RELEASE'

    protobuf "io.rsocket.rpc:rsocket-rpc-protobuf-idl:$rsocketRpcVersion"

    testCompile 'junit:junit:4.12'
    testCompile 'commons-io:commons-io:2.6'
    testCompile 'io.projectreactor:reactor-test:3.2.1.RELEASE'

}

applicationDefaultJvmArgs = [
        '-XX:+IgnoreUnrecognizedVMOptions',
        '-XshowSettings:vm',
        '-XX:+UseG1GC',
        '-XX:MaxGCPauseMillis=200',
        '-XX:+AlwaysPreTouch',
        '-XX:+UseStringDeduplication',
        '-XX:+ExplicitGCInvokesConcurrent',
        '-XX:+ParallelRefProcEnabled',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseCGroupMemoryLimitForHeap',
        '-XX:InitialRAMPercentage=70',
        '-XX:MaxRAMPercentage=70',
        '-Xlog:gc:gc.log::filecount=10,filesize=100M',
        '-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector'
]

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('com.google.guava:guava') with module('com.google.guava:guava:22.0')
        }
    }
}

configurations {
    providedRuntime
    compile.exclude(group: 'ch.qos.logback')
}

protobuf {
    generatedFilesBaseDir = "${projectDir}/src/generated"

    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        rsocketRpc {
            artifact = "io.rsocket.rpc:rsocket-rpc-protobuf:$rsocketRpcVersion"
        }
    }
    generateProtoTasks {
        all().each { task ->
            // Recompile protos when build.gradle has been changed, because
            // it's possible the version of protoc has been changed.
            task.inputs.file "${rootProject.projectDir}/build.gradle"
            task.plugins {
                rsocketRpc {}
            }

            // Generate a descriptor
            task.generateDescriptorSet = true
            task.descriptorSetOptions.path =
                    "${projectDir}/build/descriptors/${task.sourceSet.name}.dsc"
            task.descriptorSetOptions.includeSourceInfo = true
            task.descriptorSetOptions.includeImports = true
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}


idea {
    module {
        sourceDirs += file("src/test/proto")
        sourceDirs += file("src/generated/test/java")
        sourceDirs += file("src/generated/test/rsocketRpc")

        generatedSourceDirs += file('src/generated/test/java')
        generatedSourceDirs += file('src/generated/test/rsocketRpc')

    }
}

test {
    exclude 'com/netifi/proteus/demo/**'
}

clean {
    delete 'src/generated/'
}